% Produced by CVXGEN, 2021-03-12 04:35:26 -0500.
% CVXGEN is Copyright (C) 2006-2017 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2017 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
Af = params.Af;
B = params.B;
Bf = params.Bf;
Q = params.Q;
Q_last = params.Q_last;
du_max = params.du_max;
du_max_f = params.du_max_f;
u_last = params.u_last;
u_max = params.u_max;
x_0 = params.x_0;
x_max_2 = params.x_max_2;
x_max_3 = params.x_max_3;
if isfield(params, 'x_ss_1')
  x_ss_1 = params.x_ss_1;
elseif isfield(params, 'x_ss')
  x_ss_1 = params.x_ss{1};
else
  error 'could not find x_ss_1'
end
if isfield(params, 'x_ss_2')
  x_ss_2 = params.x_ss_2;
elseif isfield(params, 'x_ss')
  x_ss_2 = params.x_ss{2};
else
  error 'could not find x_ss_2'
end
if isfield(params, 'x_ss_3')
  x_ss_3 = params.x_ss_3;
elseif isfield(params, 'x_ss')
  x_ss_3 = params.x_ss{3};
else
  error 'could not find x_ss_3'
end
if isfield(params, 'x_ss_4')
  x_ss_4 = params.x_ss_4;
elseif isfield(params, 'x_ss')
  x_ss_4 = params.x_ss{4};
else
  error 'could not find x_ss_4'
end
if isfield(params, 'x_ss_5')
  x_ss_5 = params.x_ss_5;
elseif isfield(params, 'x_ss')
  x_ss_5 = params.x_ss{5};
else
  error 'could not find x_ss_5'
end
if isfield(params, 'x_ss_6')
  x_ss_6 = params.x_ss_6;
elseif isfield(params, 'x_ss')
  x_ss_6 = params.x_ss{6};
else
  error 'could not find x_ss_6'
end
if isfield(params, 'x_ss_7')
  x_ss_7 = params.x_ss_7;
elseif isfield(params, 'x_ss')
  x_ss_7 = params.x_ss{7};
else
  error 'could not find x_ss_7'
end
if isfield(params, 'x_ss_8')
  x_ss_8 = params.x_ss_8;
elseif isfield(params, 'x_ss')
  x_ss_8 = params.x_ss{8};
else
  error 'could not find x_ss_8'
end
if isfield(params, 'x_ss_9')
  x_ss_9 = params.x_ss_9;
elseif isfield(params, 'x_ss')
  x_ss_9 = params.x_ss{9};
else
  error 'could not find x_ss_9'
end
if isfield(params, 'x_ss_10')
  x_ss_10 = params.x_ss_10;
elseif isfield(params, 'x_ss')
  x_ss_10 = params.x_ss{10};
else
  error 'could not find x_ss_10'
end
if isfield(params, 'x_ss_11')
  x_ss_11 = params.x_ss_11;
elseif isfield(params, 'x_ss')
  x_ss_11 = params.x_ss{11};
else
  error 'could not find x_ss_11'
end
if isfield(params, 'x_ss_12')
  x_ss_12 = params.x_ss_12;
elseif isfield(params, 'x_ss')
  x_ss_12 = params.x_ss{12};
else
  error 'could not find x_ss_12'
end
if isfield(params, 'x_ss_13')
  x_ss_13 = params.x_ss_13;
elseif isfield(params, 'x_ss')
  x_ss_13 = params.x_ss{13};
else
  error 'could not find x_ss_13'
end
if isfield(params, 'x_ss_14')
  x_ss_14 = params.x_ss_14;
elseif isfield(params, 'x_ss')
  x_ss_14 = params.x_ss{14};
else
  error 'could not find x_ss_14'
end
if isfield(params, 'x_ss_15')
  x_ss_15 = params.x_ss_15;
elseif isfield(params, 'x_ss')
  x_ss_15 = params.x_ss{15};
else
  error 'could not find x_ss_15'
end
if isfield(params, 'x_ss_16')
  x_ss_16 = params.x_ss_16;
elseif isfield(params, 'x_ss')
  x_ss_16 = params.x_ss{16};
else
  error 'could not find x_ss_16'
end
if isfield(params, 'x_ss_17')
  x_ss_17 = params.x_ss_17;
elseif isfield(params, 'x_ss')
  x_ss_17 = params.x_ss{17};
else
  error 'could not find x_ss_17'
end
if isfield(params, 'x_ss_18')
  x_ss_18 = params.x_ss_18;
elseif isfield(params, 'x_ss')
  x_ss_18 = params.x_ss{18};
else
  error 'could not find x_ss_18'
end
if isfield(params, 'x_ss_19')
  x_ss_19 = params.x_ss_19;
elseif isfield(params, 'x_ss')
  x_ss_19 = params.x_ss{19};
else
  error 'could not find x_ss_19'
end
if isfield(params, 'x_ss_20')
  x_ss_20 = params.x_ss_20;
elseif isfield(params, 'x_ss')
  x_ss_20 = params.x_ss{20};
else
  error 'could not find x_ss_20'
end
if isfield(params, 'x_ss_21')
  x_ss_21 = params.x_ss_21;
elseif isfield(params, 'x_ss')
  x_ss_21 = params.x_ss{21};
else
  error 'could not find x_ss_21'
end
if isfield(params, 'x_ss_22')
  x_ss_22 = params.x_ss_22;
elseif isfield(params, 'x_ss')
  x_ss_22 = params.x_ss{22};
else
  error 'could not find x_ss_22'
end
if isfield(params, 'x_ss_23')
  x_ss_23 = params.x_ss_23;
elseif isfield(params, 'x_ss')
  x_ss_23 = params.x_ss{23};
else
  error 'could not find x_ss_23'
end
if isfield(params, 'x_ss_24')
  x_ss_24 = params.x_ss_24;
elseif isfield(params, 'x_ss')
  x_ss_24 = params.x_ss{24};
else
  error 'could not find x_ss_24'
end
if isfield(params, 'x_ss_25')
  x_ss_25 = params.x_ss_25;
elseif isfield(params, 'x_ss')
  x_ss_25 = params.x_ss{25};
else
  error 'could not find x_ss_25'
end
if isfield(params, 'x_ss_26')
  x_ss_26 = params.x_ss_26;
elseif isfield(params, 'x_ss')
  x_ss_26 = params.x_ss{26};
else
  error 'could not find x_ss_26'
end
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable x_1(3, 1);
  variable x_2(3, 1);
  variable x_3(3, 1);
  variable x_4(3, 1);
  variable x_5(3, 1);
  variable x_6(3, 1);
  variable x_7(3, 1);
  variable x_8(3, 1);
  variable x_9(3, 1);
  variable x_10(3, 1);
  variable x_11(3, 1);
  variable x_12(3, 1);
  variable x_13(3, 1);
  variable x_14(3, 1);
  variable x_15(3, 1);
  variable x_16(3, 1);
  variable x_17(3, 1);
  variable x_18(3, 1);
  variable x_19(3, 1);
  variable x_20(3, 1);
  variable x_21(3, 1);
  variable x_22(3, 1);
  variable x_23(3, 1);
  variable x_24(3, 1);
  variable x_25(3, 1);
  variable x_26(3, 1);
  variable u_0;
  variable u_1;
  variable u_2;
  variable u_3;
  variable u_4;
  variable u_5;
  variable u_6;
  variable u_7;
  variable u_8;
  variable u_9;
  variable u_10;
  variable u_11;
  variable u_12;
  variable u_13;
  variable u_14;
  variable u_15;
  variable u_16;
  variable u_17;
  variable u_18;
  variable u_19;
  variable u_20;
  variable u_21;
  variable u_22;
  variable u_23;
  variable u_24;
  variable u_25;

  minimize(quad_form(x_1 - x_ss_1, Q) + quad_form(x_2 - x_ss_2, Q) + quad_form(x_3 - x_ss_3, Q) + quad_form(x_4 - x_ss_4, Q) + quad_form(x_5 - x_ss_5, Q) + quad_form(x_6 - x_ss_6, Q) + quad_form(x_7 - x_ss_7, Q) + quad_form(x_8 - x_ss_8, Q) + quad_form(x_9 - x_ss_9, Q) + quad_form(x_10 - x_ss_10, Q) + quad_form(x_11 - x_ss_11, Q) + quad_form(x_12 - x_ss_12, Q) + quad_form(x_13 - x_ss_13, Q) + quad_form(x_14 - x_ss_14, Q) + quad_form(x_15 - x_ss_15, Q) + quad_form(x_16 - x_ss_16, Q) + quad_form(x_17 - x_ss_17, Q) + quad_form(x_18 - x_ss_18, Q) + quad_form(x_19 - x_ss_19, Q) + quad_form(x_20 - x_ss_20, Q) + quad_form(x_21 - x_ss_21, Q) + quad_form(x_22 - x_ss_22, Q) + quad_form(x_23 - x_ss_23, Q) + quad_form(x_24 - x_ss_24, Q) + quad_form(x_25 - x_ss_25, Q) + quad_form(x_26 - x_ss_26, Q_last));
  subject to
    x_1 == Af*x_0 + Bf*u_0;
    x_2 == A*x_1 + B*u_1;
    x_3 == A*x_2 + B*u_2;
    x_4 == A*x_3 + B*u_3;
    x_5 == A*x_4 + B*u_4;
    x_6 == A*x_5 + B*u_5;
    x_7 == A*x_6 + B*u_6;
    x_8 == A*x_7 + B*u_7;
    x_9 == A*x_8 + B*u_8;
    x_10 == A*x_9 + B*u_9;
    x_11 == A*x_10 + B*u_10;
    x_12 == A*x_11 + B*u_11;
    x_13 == A*x_12 + B*u_12;
    x_14 == A*x_13 + B*u_13;
    x_15 == A*x_14 + B*u_14;
    x_16 == A*x_15 + B*u_15;
    x_17 == A*x_16 + B*u_16;
    x_18 == A*x_17 + B*u_17;
    x_19 == A*x_18 + B*u_18;
    x_20 == A*x_19 + B*u_19;
    x_21 == A*x_20 + B*u_20;
    x_22 == A*x_21 + B*u_21;
    x_23 == A*x_22 + B*u_22;
    x_24 == A*x_23 + B*u_23;
    x_25 == A*x_24 + B*u_24;
    x_26 == A*x_25 + B*u_25;
    abs(u_0) <= u_max;
    abs(u_1) <= u_max;
    abs(u_2) <= u_max;
    abs(u_3) <= u_max;
    abs(u_4) <= u_max;
    abs(u_5) <= u_max;
    abs(u_6) <= u_max;
    abs(u_7) <= u_max;
    abs(u_8) <= u_max;
    abs(u_9) <= u_max;
    abs(u_10) <= u_max;
    abs(u_11) <= u_max;
    abs(u_12) <= u_max;
    abs(u_13) <= u_max;
    abs(u_14) <= u_max;
    abs(u_15) <= u_max;
    abs(u_16) <= u_max;
    abs(u_17) <= u_max;
    abs(u_18) <= u_max;
    abs(u_19) <= u_max;
    abs(u_20) <= u_max;
    abs(u_21) <= u_max;
    abs(u_22) <= u_max;
    abs(u_23) <= u_max;
    abs(u_24) <= u_max;
    abs(u_25) <= u_max;
    abs(u_0 - u_last) <= du_max_f;
    abs(u_1 - u_0) <= du_max;
    abs(u_2 - u_1) <= du_max;
    abs(u_3 - u_2) <= du_max;
    abs(u_4 - u_3) <= du_max;
    abs(u_5 - u_4) <= du_max;
    abs(u_6 - u_5) <= du_max;
    abs(u_7 - u_6) <= du_max;
    abs(u_8 - u_7) <= du_max;
    abs(u_9 - u_8) <= du_max;
    abs(u_10 - u_9) <= du_max;
    abs(u_11 - u_10) <= du_max;
    abs(u_12 - u_11) <= du_max;
    abs(u_13 - u_12) <= du_max;
    abs(u_14 - u_13) <= du_max;
    abs(u_15 - u_14) <= du_max;
    abs(u_16 - u_15) <= du_max;
    abs(u_17 - u_16) <= du_max;
    abs(u_18 - u_17) <= du_max;
    abs(u_19 - u_18) <= du_max;
    abs(u_20 - u_19) <= du_max;
    abs(u_21 - u_20) <= du_max;
    abs(u_22 - u_21) <= du_max;
    abs(u_23 - u_22) <= du_max;
    abs(u_24 - u_23) <= du_max;
    abs(u_25 - u_24) <= du_max;
    abs(x_1(2)) <= x_max_2;
    abs(x_2(2)) <= x_max_2;
    abs(x_3(2)) <= x_max_2;
    abs(x_4(2)) <= x_max_2;
    abs(x_5(2)) <= x_max_2;
    abs(x_6(2)) <= x_max_2;
    abs(x_7(2)) <= x_max_2;
    abs(x_8(2)) <= x_max_2;
    abs(x_9(2)) <= x_max_2;
    abs(x_10(2)) <= x_max_2;
    abs(x_11(2)) <= x_max_2;
    abs(x_12(2)) <= x_max_2;
    abs(x_13(2)) <= x_max_2;
    abs(x_14(2)) <= x_max_2;
    abs(x_15(2)) <= x_max_2;
    abs(x_16(2)) <= x_max_2;
    abs(x_17(2)) <= x_max_2;
    abs(x_18(2)) <= x_max_2;
    abs(x_19(2)) <= x_max_2;
    abs(x_20(2)) <= x_max_2;
    abs(x_21(2)) <= x_max_2;
    abs(x_22(2)) <= x_max_2;
    abs(x_23(2)) <= x_max_2;
    abs(x_24(2)) <= x_max_2;
    abs(x_25(2)) <= x_max_2;
    abs(x_26(2)) <= x_max_2;
    abs(x_1(3)) <= x_max_3;
    abs(x_2(3)) <= x_max_3;
    abs(x_3(3)) <= x_max_3;
    abs(x_4(3)) <= x_max_3;
    abs(x_5(3)) <= x_max_3;
    abs(x_6(3)) <= x_max_3;
    abs(x_7(3)) <= x_max_3;
    abs(x_8(3)) <= x_max_3;
    abs(x_9(3)) <= x_max_3;
    abs(x_10(3)) <= x_max_3;
    abs(x_11(3)) <= x_max_3;
    abs(x_12(3)) <= x_max_3;
    abs(x_13(3)) <= x_max_3;
    abs(x_14(3)) <= x_max_3;
    abs(x_15(3)) <= x_max_3;
    abs(x_16(3)) <= x_max_3;
    abs(x_17(3)) <= x_max_3;
    abs(x_18(3)) <= x_max_3;
    abs(x_19(3)) <= x_max_3;
    abs(x_20(3)) <= x_max_3;
    abs(x_21(3)) <= x_max_3;
    abs(x_22(3)) <= x_max_3;
    abs(x_23(3)) <= x_max_3;
    abs(x_24(3)) <= x_max_3;
    abs(x_25(3)) <= x_max_3;
    abs(x_26(3)) <= x_max_3;
cvx_end
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
vars.u_3 = u_3;
vars.u{3} = u_3;
vars.u_4 = u_4;
vars.u{4} = u_4;
vars.u_5 = u_5;
vars.u{5} = u_5;
vars.u_6 = u_6;
vars.u{6} = u_6;
vars.u_7 = u_7;
vars.u{7} = u_7;
vars.u_8 = u_8;
vars.u{8} = u_8;
vars.u_9 = u_9;
vars.u{9} = u_9;
vars.u_10 = u_10;
vars.u{10} = u_10;
vars.u_11 = u_11;
vars.u{11} = u_11;
vars.u_12 = u_12;
vars.u{12} = u_12;
vars.u_13 = u_13;
vars.u{13} = u_13;
vars.u_14 = u_14;
vars.u{14} = u_14;
vars.u_15 = u_15;
vars.u{15} = u_15;
vars.u_16 = u_16;
vars.u{16} = u_16;
vars.u_17 = u_17;
vars.u{17} = u_17;
vars.u_18 = u_18;
vars.u{18} = u_18;
vars.u_19 = u_19;
vars.u{19} = u_19;
vars.u_20 = u_20;
vars.u{20} = u_20;
vars.u_21 = u_21;
vars.u{21} = u_21;
vars.u_22 = u_22;
vars.u{22} = u_22;
vars.u_23 = u_23;
vars.u{23} = u_23;
vars.u_24 = u_24;
vars.u{24} = u_24;
vars.u_25 = u_25;
vars.u{25} = u_25;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
vars.x_11 = x_11;
vars.x{11} = x_11;
vars.x_12 = x_12;
vars.x{12} = x_12;
vars.x_13 = x_13;
vars.x{13} = x_13;
vars.x_14 = x_14;
vars.x{14} = x_14;
vars.x_15 = x_15;
vars.x{15} = x_15;
vars.x_16 = x_16;
vars.x{16} = x_16;
vars.x_17 = x_17;
vars.x{17} = x_17;
vars.x_18 = x_18;
vars.x{18} = x_18;
vars.x_19 = x_19;
vars.x{19} = x_19;
vars.x_20 = x_20;
vars.x{20} = x_20;
vars.x_21 = x_21;
vars.x{21} = x_21;
vars.x_22 = x_22;
vars.x{22} = x_22;
vars.x_23 = x_23;
vars.x{23} = x_23;
vars.x_24 = x_24;
vars.x{24} = x_24;
vars.x_25 = x_25;
vars.x{25} = x_25;
vars.x_26 = x_26;
vars.x{26} = x_26;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
